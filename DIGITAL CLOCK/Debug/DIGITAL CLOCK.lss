
DIGITAL CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a2  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000115  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015f  00000000  00000000  000004d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018d  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000161  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>

const int delay=1000;

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	unsigned char seg[10]={0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRA=DDRB=DDRC=DDRD=0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	81 bb       	out	0x11, r24	; 17
  ac:	84 bb       	out	0x14, r24	; 20
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
label:	
		for(char i=0;i<3;i++)
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	be 01       	movw	r22, r28
  b6:	6f 5f       	subi	r22, 0xFF	; 255
  b8:	7f 4f       	sbci	r23, 0xFF	; 255
  ba:	2b 01       	movw	r4, r22
  bc:	ae 01       	movw	r20, r28
  be:	45 5f       	subi	r20, 0xF5	; 245
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	7b 01       	movw	r14, r22
  c4:	06 e0       	ldi	r16, 0x06	; 6
  c6:	e0 0e       	add	r14, r16
  c8:	f1 1c       	adc	r15, r1
#include <util/delay.h>

const int delay=1000;

int main(void)
{
  ca:	86 2e       	mov	r8, r22
  cc:	95 2c       	mov	r9, r5
  ce:	a4 2c       	mov	r10, r4
  d0:	b5 2c       	mov	r11, r5
	unsigned char seg[10]={0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6};
	DDRA=DDRB=DDRC=DDRD=0xff;
    while(1)
    {
label:	
		for(char i=0;i<3;i++)
  d2:	71 2c       	mov	r7, r1
  d4:	35 c0       	rjmp	.+106    	; 0x140 <main+0xbe>
		for(char j=0;j<10;j++)
		for(char k=0;k<6;k++)
		for (char l=0;l<10;l++)
		{
			PORTA=seg[i];
  d6:	d9 01       	movw	r26, r18
  d8:	dc 90       	ld	r13, X
  da:	db ba       	out	0x1b, r13	; 27
			PORTB=seg[j];
  dc:	dc 01       	movw	r26, r24
  de:	dc 90       	ld	r13, X
  e0:	d8 ba       	out	0x18, r13	; 24
			PORTC=seg[k];
  e2:	d1 01       	movw	r26, r2
  e4:	dc 90       	ld	r13, X
  e6:	d5 ba       	out	0x15, r13	; 21
			PORTD=seg[l];	
  e8:	d1 90       	ld	r13, Z+
  ea:	d2 ba       	out	0x12, r13	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	bf e3       	ldi	r27, 0x3F	; 63
  ee:	0d e0       	ldi	r16, 0x0D	; 13
  f0:	a3 e0       	ldi	r26, 0x03	; 3
  f2:	b1 50       	subi	r27, 0x01	; 1
  f4:	00 40       	sbci	r16, 0x00	; 0
  f6:	a0 40       	sbci	r26, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x70>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7a>
  fc:	00 00       	nop
			_delay_ms(delay);
			if(i==2 && j==4)
  fe:	12 30       	cpi	r17, 0x02	; 2
 100:	19 f4       	brne	.+6      	; 0x108 <main+0x86>
 102:	b4 e0       	ldi	r27, 0x04	; 4
 104:	cb 16       	cp	r12, r27
 106:	c9 f0       	breq	.+50     	; 0x13a <main+0xb8>
    {
label:	
		for(char i=0;i<3;i++)
		for(char j=0;j<10;j++)
		for(char k=0;k<6;k++)
		for (char l=0;l<10;l++)
 108:	e4 17       	cp	r30, r20
 10a:	f5 07       	cpc	r31, r21
 10c:	21 f7       	brne	.-56     	; 0xd6 <main+0x54>
 10e:	ef ef       	ldi	r30, 0xFF	; 255
 110:	2e 1a       	sub	r2, r30
 112:	3e 0a       	sbc	r3, r30
    while(1)
    {
label:	
		for(char i=0;i<3;i++)
		for(char j=0;j<10;j++)
		for(char k=0;k<6;k++)
 114:	2e 14       	cp	r2, r14
 116:	3f 04       	cpc	r3, r15
 118:	19 f0       	breq	.+6      	; 0x120 <main+0x9e>
#include <util/delay.h>

const int delay=1000;

int main(void)
{
 11a:	ea 2d       	mov	r30, r10
 11c:	fb 2d       	mov	r31, r11
 11e:	db cf       	rjmp	.-74     	; 0xd6 <main+0x54>
 120:	01 96       	adiw	r24, 0x01	; 1
	DDRA=DDRB=DDRC=DDRD=0xff;
    while(1)
    {
label:	
		for(char i=0;i<3;i++)
		for(char j=0;j<10;j++)
 122:	84 17       	cp	r24, r20
 124:	95 07       	cpc	r25, r21
 126:	29 f0       	breq	.+10     	; 0x132 <main+0xb0>
#include <util/delay.h>

const int delay=1000;

int main(void)
{
 128:	28 2c       	mov	r2, r8
 12a:	39 2c       	mov	r3, r9
 12c:	c8 2e       	mov	r12, r24
 12e:	c6 1a       	sub	r12, r22
 130:	f4 cf       	rjmp	.-24     	; 0x11a <main+0x98>
	unsigned char seg[10]={0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6};
	DDRA=DDRB=DDRC=DDRD=0xff;
    while(1)
    {
label:	
		for(char i=0;i<3;i++)
 132:	1f 5f       	subi	r17, 0xFF	; 255
 134:	13 30       	cpi	r17, 0x03	; 3
 136:	18 f4       	brcc	.+6      	; 0x13e <main+0xbc>
 138:	03 c0       	rjmp	.+6      	; 0x140 <main+0xbe>
 13a:	17 2d       	mov	r17, r7
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0xbe>
 13e:	17 2d       	mov	r17, r7
#include <util/delay.h>

const int delay=1000;

int main(void)
{
 140:	c2 01       	movw	r24, r4
		for(char i=0;i<3;i++)
		for(char j=0;j<10;j++)
		for(char k=0;k<6;k++)
		for (char l=0;l<10;l++)
		{
			PORTA=seg[i];
 142:	21 2f       	mov	r18, r17
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	26 0f       	add	r18, r22
 148:	37 1f       	adc	r19, r23
 14a:	ee cf       	rjmp	.-36     	; 0x128 <main+0xa6>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
